
apply plugin: "war"
apply plugin: "spring-boot"
apply plugin: 'eclipse'
apply plugin: 'docker'

group ="simple"

springBoot {
    mainClass = "com.tdu.run.Application"
}

sourceCompatibility = 1.7
targetCompatibility = 1.7
	
[compileJava,compileTestJava,javadoc]*.options*.encoding = 'UTF-8'
  
  

repositories {
   mavenLocal()
   maven {
   	url uri('/Users/tangdu/.m2/repository')
   }
   mavenCentral()
}

war {
	baseName = 'simple'
    version =  '0.1.0'
}

buildscript {
	repositories {
	   mavenLocal()
       mavenCentral()
    }
    dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${spring_boot_version}")
		classpath('se.transmode.gradle:gradle-docker:1.2')
	}
}

configurations {
	compile.exclude group: "org.springframework.boot", module: "spring-boot-starter-tomcat"
	compile.exclude group: "org.codehaus.woodstox", module: "wstx-asl"
	compile.exclude group: "commons-fileupload"
}
    
dependencies{
	providedRuntime(
		"org.springframework.boot:spring-boot-starter-undertow:${spring_boot_version}",
	)
	compile (
		"org.springframework.boot:spring-boot-starter:${spring_boot_version}",
		"org.springframework.boot:spring-boot-starter-web:${spring_boot_version}",
		"org.springframework.boot:spring-boot-starter-jdbc:${spring_boot_version}",
		"org.springframework.boot:spring-boot-autoconfigure:${spring_boot_version}",
		"org.springframework.boot:spring-boot-starter-actuator:${spring_boot_version}",
		"org.springframework.boot:spring-boot-starter-aop:${spring_boot_version}",
		"org.springframework.boot:spring-boot-starter-remote-shell:${spring_boot_version}",
		"org.springframework.boot:spring-boot-starter-test:${spring_boot_version}",
		"org.springframework.boot:spring-boot-starter-redis:${spring_boot_version}",
		"org.springframework.boot:spring-boot-starter-amqp:${spring_boot_version}",
		
		
		"org.springframework:spring-context-support:${spring_version}",
		"com.fasterxml.jackson.dataformat:jackson-dataformat-xml:${jackson_version}",
		"javax.servlet:javax.servlet-api:${servlet_api_version}",
		"org.glassfish.web:javax.el:${javax_el_version}",
		"junit:junit:${junit_version}",
		"org.flywaydb:flyway-core:${flyway_version}",
		"mysql:mysql-connector-java:${mysql_version}",
		"commons-io:commons-io:${common_io_version}",
		"joda-time:joda-time:${jota_time_version}",
		"com.alibaba:druid:${druid_version}",
		"com.google.guava:guava:${guava_version}",
		"net.sf.ehcache:ehcache:${ehcache_version}",
		"org.mybatis:mybatis:${mybatis_version}",
		"org.mybatis:mybatis-spring:${mybatis_spring_version}",
		
		//"com.dangdang:sharding-jdbc:${sharding_jdbc_version}",
		"org.webjars:jqwidgets:${jqwidgets_version}",
		//"com.tdu.framework.webjars:${sui3_version}",
		
		"io.springfox:springfox-swagger-ui:${swagger_version}",
		"io.springfox:springfox-swagger2:${swagger_version}",
		
		//"de.codecentric:spring-boot-admin-server:1.3.3",
		//"de.codecentric:spring-boot-admin-server-ui:1.3.3",
		//"de.codecentric:spring-boot-admin-starter-client:1.3.3",
	)
}

 sourceSets {
      main {
          java {
              srcDir "src/main/java"
          }
          resources {
              srcDir "src/main/resources"
              srcDir "src/main/docker"
          }
      }
      test {
          java {
              srcDir "src/test/java"
          }
          resources {
              srcDir "src/test/resources"
          }
      }
  }

//docker任务
task buildDocker(type: Docker, dependsOn: build) {
  push = true
  applicationName = war.baseName
  dockerfile = file('src/main/docker/Dockerfile')
  doFirst {
  	//docker add是相对于dockerfile的路径，所以简便做法把打包好的war复制到docker目录下.
    copy {
      from war
      into stageDir
    }
    /*copy {
      from 'src/main/docker/jre-8u91-linux-x64.rpm'
      into stageDir
    }*/
  }
}



//源代码打包任务
task sourceJar (type : Jar) {
	classifier = "sources"
	from sourceSets.main.allSource
}

//Java文档打包任务
task javadocJar (type: Jar, dependsOn: javadoc) {
	classifier = "javadoc"
	from javadoc.destinationDir
}